# -*- coding: utf-8 -*-
"""
Created on Wed Dec 29 18:57:20 2021

@author: pc
"""

'''
#single inheritance

class alpha:
    def fun(self):
        print('alpha class fun()')
class beta(alpha):
    pass

b=beta()
b.fun()

#alpha class fun()

'''


'''
#multilevel inheritance

class alpha:
    def fun1(self):
        print('inside alpha fun1()')
        
class beta(alpha):
    def fun2(self):
        print('inside beta fun2()')
        
class gamma(beta):
    pass

g=gamma()
g.fun1() #inside alpha fun1()
g.fun2() #inside beta fun2()

'''

'''
#mutiple inheritance
class alpha:
    def fun1(self):
        print('alpha class')
        
class beta:
    def fun2(self):
        print('beta class')

class gamma(alpha,beta):
    pass        
     

g=gamma()
g.fun1() #alpha class
g.fun2() #beta class
'''

'''
#ex-1:single inheritance
class parent:
    def m1(self):
        print('parent m1 method')
        
class child(parent):
    def m2(self):
        print('child m2 method')
        
c=child()
c.m1() #parent m1 method
c.m2()  #child m2 method
'''


'''
#ex-2:calling super class methods:by using super()

class parent:
    def m1(self):
        print('parent m1 method')
        
class child(parent):
    def m2(self):
        super().m1()    
        print('child m2 method')

c=child()
c.m2()
'''  

'''
#ex-5:super class variables with differnt names

class parent:
    a,b=10,25
    
class child(parent):
    x,y=100,200

    def add(self,i,j):
        print(i+j)  #22
        print(self.x+self.y) #300
        print(self.a+self.b) #35
        
c=child()
c.add(10, 12)        

'''

'''
#ex-6:variables with same names

a,b=1,2 #global variables
class parent:
    a,b=10,20 #class variabls
    
    
class child(parent):
    a,b=100,200  #class variables
    def add(self,a,b): #local variables
        print(a+b)    #1234
        print(self.a+self.b) #300
        print(super().a+super().b)#30
        print(globals()['a']+globals()['b'])#3
        
c=child()
c.add(1222, 12)        
'''


'''
#ex-7 parent class constructor

#case1
class parent:
    def __init__(self):
        print('parent class constructor')
class child(parent):
    pass        

c=child() #parent class constructor
'''

'''
#case2
class parent:
    def __init__(self):
        print('parent class constructor')
        
class child(parent):
    def __init__(self):
        print('child class cons')

c=child()      #child class cons

'''

'''
#case3
class parent:
    def __init__(self,name):
        print('parent class cons:',name)
        
class child(parent):
    def __init__(self):
        super().__init__('sri') #parent class cons: sri
        print('child class cons') #child class cons
        
        
c=child()        
'''


'''
#ex-8

class parent:
    def __init__(self,name):
        print('parent class cons:',name)    
        
class child(parent):
    def __init__(self):
        super().__init__('kanth') #arent class cons: kanth
        parent.__init__(self, "mani") #parent class cons: mani
        print('child class cons')#child class cons

c=child() 

'''

'''
#ex-9:multilevel inheritance
class A:
    def m1(self):
        print('m1 method')
class B(A):
    def m2(self):
        print('m2 method')
class C(B):
    def m3(self):
        print('m3 method')

c=C()
c.m1() #m1 method
c.m2() #m2 method
c.m3()  #m3 method
'''


'''
#ex-10:multiple inheritance
class A:
    def m1(self):
        print('m1 method')
        
class B:
    def m2(self):
        print('m2 method')


class C(A,B):
    def m3(self):
        print('m3 method')
        
c=C()
c.m3() #vm3 method
c.m2() #m2 method
c.m1()   #m1 method    
        
'''


'''
#ex-11:hierarchial inheritance
class vehicle:
    def m1(self):
        print('vehicle info')
        
class car(vehicle):
    def m2(self):
        print('car info')
class plane(vehicle):
    def m3(self):
        print('plane info')     
        
        
c=car()
c.m2()  #car info

v=vehicle()
v.m1() #vehicle info

p=plane()
p.m3() 
#plane info   


'''



'''
#ex-12

class person:
    def __init__(self,first,last): #local variables
        self.first=first
        self.last=last
        
class emp(person):
    def __init__(self, first, last,id):
        super().__init__(first, last)
        self.id=id
        
    def display(self):
        print('emp id={} firstname={} lastname={}'.format(self.id,self.first,self.last))
              
              
e1=emp('sri', 'redy', 544) 
e1.display() #emp id=544 firstname=sri lastname=redy

e2=emp('okok', 'giij',78)
e2.display() #emp id=78 firstname=okok lastname=giij
'''



'''
#ex-13
class messenger:
    def send_message(self):
        print('text message is sent')
    def receive_message(self):
        print('text message is received') 

class internalmessenger(messenger): #inherted method
    pass
class wtsappmessenger(messenger): #overridden method 
    def send_message(self):
        print('text,photos,video,file is sent') 

    def receive_message(self):
        print('text,photos,video,file is recived') 
        
    def set_dp(self):         #specialized method
        print('dp is set')
        
    def set_status(self):
        print('status is set')
        
m=messenger()
m.send_message() #text message is sent
m.receive_message() #text message is received

im=internalmessenger()
im.send_message() #text message is sent
im.receive_message() #text message is received

wam=wtsappmessenger()
wam.send_message() #text,photos,video,file is sent
wam.receive_message() #text,photos,video,file is recived
wam.set_dp()   #dp is set
wam.set_status() #status is set    


'''


'''
#ex-14 :super() method

class customer:
    def __init__(self,name,ph,email):
        self.name=name
        self.ph=ph
        self.email=email
        
class plcustomer(customer):
    def __init__(self, name, ph, email,pl_id):
        self.name=name
        self.ph=ph
        self.email=email
        self.pl_id=pl_id

    def disp(self):
        print(self.__dict__)

p=plcustomer('man',89889898, 'man@gmail.com', 7)
p.disp()    #{'name': 'man', 'ph': 89889898, 'email': 'man@gmail.com', 'pl_id': 7}



class customer:
    def __init__(self,name,ph,email):
        self.name=name
        self.ph=ph
        self.email=email
        
class plcustomer(customer):
    def __init__(self, name, ph, email,pl_id):
        super().__init__(name, ph, email)
        self.pl_id=pl_id

    def disp(self):
        print(self.__dict__)

p=plcustomer('man',89889898, 'man@gmail.com', 7)
p.disp()  #{'name': 'man', 'ph': 89889898, 'email': 'man@gmail.com', 'pl_id': 7}

    
'''   



'''
#super() method in single inheritance
class customer:
    def __init__(self,name,addr,ph_no):
        self.name=name
        self.addr=addr
        self.ph_no=ph_no
        
    def place_order(self,dish):
        cost=0
        del_charge=50
        if dish=='pizza':
            cost=500+del_charge
        else:
            cost=250+del_charge
        return cost   
    
class pl_customer(customer):
    def __init__(self, name, addr, ph_no,pl_id):
        super().__init__(name, addr, ph_no)
        self.pl_id=pl_id
        
    def place_order(self, dish):
        del_charge=50
        return (super().place_order(dish)-del_charge)*0.95
                
p=pl_customer('srikanth', 'mulugu', 7989595955445, 78)        
print(p.place_order('pizza') )       

'''

'''
#super() method in multilvel inheritance

#case1:
class A:
    def fun(self):
        print('A')
        
class B(A):
    def fun(self):
        print('B')
class C(B):
    def fun(self):
        super(C,self).fun()
        print('C')
        
c=C()
c.fun()  #B  #C

#case2:
    
class A:
    def fun(self):
        print('A')
class B(A):
    def fun(self):
        print('B')
class C(B):
    def fun(self):
        super(B,self).fun()
        print('c')        
        
c=C()
c.fun()    #A     #C


#super() method in multiple inheritance


class A:
    def fun1(self):
        print('A')
        
class B:
    def fun2(self):
        print('B') 
        
class C(A,B):
    def fun3(self):
        super().fun1()
        print('C')  
        
c=C()
c.fun3()   #A    #C
      
'''



'''
#external builtin classes


#case1
class contact:
    all_contacts=[]

    def __init__(self,name,email):
        self.name=name
        self.email=email
        contact.all_contacts.append(self)
    def display(self):
        print(self.__dict__)
      
        
c1=contact('srikanth', 'sri@gmail.com') 
c2=contact('manu','mani@gmail.com')
print(contact.all_contacts)     #[<__main__.contact object at 0x000002344DB31B80>, <__main__.contact object at 0x000002344DB310A0>]
for i in contact.all_contacts:
    i.display()
    
#{'name': 'srikanth', 'email': 'sri@gmail.com'}
#{'name': 'manu', 'email': 'mani@gmail.com'}    


name='srikanth'
for i in contact.all_contacts:
    if i.name==name:
        print('contact found') #contact found
        
        
#case2

class contactlist(list):
    def display_all_contacts(self):
        for i in self:
            i.display()

    def search_contact(self,name):
        for i in self:
            if i.name==name:
                return "contact found"
            return 'contact not found'
        
class contact:
    all_contacts=contactlist()
    def __init__(self,name,email):
        self.name=name
        self.email=email
        contact.all_contacts.append(self)
        
    def display(self):
        print(self.__dict__)
c1=contact('sri', 'ggch@gmail.com')
c2=contact('navv', 'gsgd@gmail.com')

contact.all_contacts.display_all_contacts()
print(contact.all_contacts.search_contact('sri'))


{'name': 'sri', 'email': 'ggch@gmail.com'}
{'name': 'navv', 'email': 'gsgd@gmail.com'}
contact found
 '''       